{"version":3,"sources":["../../src/cronjob.ts"],"sourcesContent":["import {\n  JsonRpcIdStruct,\n  JsonRpcParamsStruct,\n  JsonRpcVersionStruct,\n} from '@metamask/utils';\nimport { parseExpression } from 'cron-parser';\nimport type { Infer } from 'superstruct';\nimport { array, create, object, optional, refine, string } from 'superstruct';\n\nexport const CronjobRpcRequestStruct = object({\n  jsonrpc: optional(JsonRpcVersionStruct),\n  id: optional(JsonRpcIdStruct),\n  method: string(),\n  params: optional(JsonRpcParamsStruct),\n});\n\nexport type CronjobRpcRequest = Infer<typeof CronjobRpcRequestStruct>;\n\nexport const CronExpressionStruct = refine(\n  string(),\n  'CronExpression',\n  (value) => {\n    try {\n      parseExpression(value);\n      return true;\n    } catch {\n      return false;\n    }\n  },\n);\n\nexport type CronExpression = Infer<typeof CronExpressionStruct>;\n\n/**\n * Parses a cron expression.\n *\n * @param expression - Expression to parse.\n * @returns A CronExpression class instance.\n */\nexport function parseCronExpression(expression: string | object) {\n  const ensureStringExpression = create(expression, CronExpressionStruct);\n  return parseExpression(ensureStringExpression);\n}\n\nexport const CronjobSpecificationStruct = object({\n  expression: CronExpressionStruct,\n  request: CronjobRpcRequestStruct,\n});\nexport type CronjobSpecification = Infer<typeof CronjobSpecificationStruct>;\n\n/**\n * Check if the given value is a {@link CronjobSpecification} object.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link CronjobSpecification} object.\n */\nexport function isCronjobSpecification(value: unknown): boolean {\n  try {\n    create(value, CronjobSpecificationStruct);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport const CronjobSpecificationArrayStruct = array(\n  CronjobSpecificationStruct,\n);\n\n/**\n * Check if the given value is an array of {@link CronjobSpecification} objects.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid array of {@link CronjobSpecification} objects.\n */\nexport function isCronjobSpecificationArray(value: unknown): boolean {\n  try {\n    create(value, CronjobSpecificationArrayStruct);\n    return true;\n  } catch {\n    return false;\n  }\n}\n"],"names":["JsonRpcIdStruct","JsonRpcParamsStruct","JsonRpcVersionStruct","parseExpression","array","create","object","optional","refine","string","CronjobRpcRequestStruct","jsonrpc","id","method","params","CronExpressionStruct","value","parseCronExpression","expression","ensureStringExpression","CronjobSpecificationStruct","request","isCronjobSpecification","CronjobSpecificationArrayStruct","isCronjobSpecificationArray"],"mappings":"AAAA,SACEA,eAAe,EACfC,mBAAmB,EACnBC,oBAAoB,QACf,kBAAkB;AACzB,SAASC,eAAe,QAAQ,cAAc;AAE9C,SAASC,KAAK,EAAEC,MAAM,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,MAAM,QAAQ,cAAc;AAE9E,OAAO,MAAMC,0BAA0BJ,OAAO;IAC5CK,SAASJ,SAASL;IAClBU,IAAIL,SAASP;IACba,QAAQJ;IACRK,QAAQP,SAASN;AACnB,GAAG;AAIH,OAAO,MAAMc,uBAAuBP,OAClCC,UACA,kBACA,CAACO;IACC,IAAI;QACFb,gBAAgBa;QAChB,OAAO;IACT,EAAE,OAAM;QACN,OAAO;IACT;AACF,GACA;AAIF;;;;;CAKC,GACD,OAAO,SAASC,oBAAoBC,UAA2B;IAC7D,MAAMC,yBAAyBd,OAAOa,YAAYH;IAClD,OAAOZ,gBAAgBgB;AACzB;AAEA,OAAO,MAAMC,6BAA6Bd,OAAO;IAC/CY,YAAYH;IACZM,SAASX;AACX,GAAG;AAGH;;;;;CAKC,GACD,OAAO,SAASY,uBAAuBN,KAAc;IACnD,IAAI;QACFX,OAAOW,OAAOI;QACd,OAAO;IACT,EAAE,OAAM;QACN,OAAO;IACT;AACF;AAEA,OAAO,MAAMG,kCAAkCnB,MAC7CgB,4BACA;AAEF;;;;;CAKC,GACD,OAAO,SAASI,4BAA4BR,KAAc;IACxD,IAAI;QACFX,OAAOW,OAAOO;QACd,OAAO;IACT,EAAE,OAAM;QACN,OAAO;IACT;AACF"}