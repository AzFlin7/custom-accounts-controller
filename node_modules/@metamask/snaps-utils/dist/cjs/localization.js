"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    LOCALIZABLE_FIELDS: function() {
        return LOCALIZABLE_FIELDS;
    },
    LocalizationFileStruct: function() {
        return LocalizationFileStruct;
    },
    getValidatedLocalizationFiles: function() {
        return getValidatedLocalizationFiles;
    },
    getLocalizationFile: function() {
        return getLocalizationFile;
    },
    TRANSLATION_REGEX: function() {
        return TRANSLATION_REGEX;
    },
    translate: function() {
        return translate;
    },
    getLocalizedSnapManifest: function() {
        return getLocalizedSnapManifest;
    },
    validateSnapManifestLocalizations: function() {
        return validateSnapManifestLocalizations;
    }
});
const _snapssdk = require("@metamask/snaps-sdk");
const _superstruct = require("superstruct");
const _json = require("./json");
const LOCALIZABLE_FIELDS = [
    'description',
    'proposedName'
];
const LocalizationFileStruct = (0, _superstruct.object)({
    locale: (0, _superstruct.string)(),
    messages: (0, _superstruct.record)((0, _superstruct.string)(), (0, _superstruct.object)({
        message: (0, _superstruct.string)(),
        description: (0, _superstruct.optional)((0, _superstruct.string)())
    }))
});
function getValidatedLocalizationFiles(localizationFiles) {
    for (const file of localizationFiles){
        try {
            file.result = (0, _superstruct.create)((0, _json.parseJson)(file.toString()), LocalizationFileStruct);
        } catch (error) {
            if (error instanceof _superstruct.StructError) {
                throw new Error(`Failed to validate localization file "${file.path}": ${error.message}.`);
            }
            if (error instanceof SyntaxError) {
                throw new Error(`Failed to parse localization file "${file.path}" as JSON.`);
            }
            throw error;
        }
    }
    return localizationFiles;
}
function getLocalizationFile(locale, localizationFiles) {
    const file = localizationFiles.find((localizationFile)=>localizationFile.locale === locale);
    if (!file) {
        return localizationFiles.find((localizationFile)=>localizationFile.locale === 'en');
    }
    return file;
}
const TRANSLATION_REGEX = /\{\{\s?([a-zA-Z0-9-_\s]+)\s?\}\}/gu;
function translate(value, file) {
    const matches = value.matchAll(TRANSLATION_REGEX);
    const array = Array.from(matches);
    return array.reduce((result, [match, key])=>{
        if (!file) {
            throw new Error(`Failed to translate "${value}": No localization file found.`);
        }
        const translation = file.messages[key.trim()];
        if (!translation) {
            throw new Error(`Failed to translate "${value}": No translation found for "${key.trim()}" in "${file.locale}" file.`);
        }
        return result.replace(match, translation.message);
    }, value);
}
function getLocalizedSnapManifest(snapManifest, locale, localizationFiles) {
    const file = getLocalizationFile(locale, localizationFiles);
    return LOCALIZABLE_FIELDS.reduce((manifest, field)=>{
        const translation = translate(manifest[field], file);
        return {
            ...manifest,
            [field]: translation
        };
    }, snapManifest);
}
function validateSnapManifestLocalizations(snapManifest, localizationFiles) {
    try {
        // `translate` throws if the manifest cannot be localized, so we just attempt
        // to translate the manifest using all localization files.
        localizationFiles.filter((file)=>file.locale !== 'en').forEach((file)=>{
            getLocalizedSnapManifest(snapManifest, file.locale, localizationFiles);
        });
        // The manifest must be localizable in English.
        getLocalizedSnapManifest(snapManifest, 'en', localizationFiles);
    } catch (error) {
        throw new Error(`Failed to localize Snap manifest: ${(0, _snapssdk.getErrorMessage)(error)}`);
    }
}

//# sourceMappingURL=localization.js.map