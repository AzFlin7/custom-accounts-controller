{"version":3,"sources":["../../src/namespace.ts"],"sourcesContent":["import type { AccountId, ChainId } from '@metamask/snaps-sdk';\nimport type { Infer } from 'superstruct';\nimport {\n  array,\n  define,\n  is,\n  object,\n  optional,\n  pattern,\n  size,\n  string,\n} from 'superstruct';\n\nimport type { InferMatching } from './structs';\n\nexport const CHAIN_ID_REGEX =\n  /^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-a-zA-Z0-9]{1,32})$/u;\n\nexport const ACCOUNT_ID_REGEX =\n  /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-a-zA-Z0-9]{1,32})):(?<accountAddress>[a-zA-Z0-9]{1,64})$/u;\n\nexport const ACCOUNT_ADDRESS_REGEX = /^(?<accountAddress>[a-zA-Z0-9]{1,64})$/u;\n\n/**\n * Parse a chain ID string to an object containing the namespace and reference.\n * This validates the chain ID before parsing it.\n *\n * @param chainId - The chain ID to validate and parse.\n * @returns The parsed chain ID.\n */\nexport function parseChainId(chainId: ChainId): {\n  namespace: NamespaceId;\n  reference: string;\n} {\n  const match = CHAIN_ID_REGEX.exec(chainId);\n  if (!match?.groups) {\n    throw new Error('Invalid chain ID.');\n  }\n\n  return {\n    namespace: match.groups.namespace,\n    reference: match.groups.reference,\n  };\n}\n\n/**\n * Parse an account ID to an object containing the chain, chain ID and address.\n * This validates the account ID before parsing it.\n *\n * @param accountId - The account ID to validate and parse.\n * @returns The parsed account ID.\n */\nexport function parseAccountId(accountId: AccountId): {\n  chain: { namespace: NamespaceId; reference: string };\n  chainId: ChainId;\n  address: string;\n} {\n  const match = ACCOUNT_ID_REGEX.exec(accountId);\n  if (!match?.groups) {\n    throw new Error('Invalid account ID.');\n  }\n\n  return {\n    address: match.groups.accountAddress,\n    chainId: match.groups.chainId as ChainId,\n    chain: {\n      namespace: match.groups.namespace,\n      reference: match.groups.reference,\n    },\n  };\n}\n\n/**\n * A helper struct for a string with a minimum length of 1 and a maximum length\n * of 40.\n */\nexport const LimitedString = size(string(), 1, 40);\n\nexport const ChainIdStringStruct = define<ChainId>(\n  'Chain ID',\n  string().validator,\n);\n\n/**\n * A CAIP-2 chain ID, i.e., a human-readable namespace and reference.\n */\nexport const ChainIdStruct = pattern<ChainId, null>(\n  ChainIdStringStruct,\n  CHAIN_ID_REGEX,\n);\n\nexport type Caip2ChainId = InferMatching<typeof ChainIdStruct, ChainId>;\n\nexport const AccountIdStruct = pattern(string(), ACCOUNT_ID_REGEX);\n\nexport const AccountIdArrayStruct = array(AccountIdStruct);\nexport const AccountAddressStruct = pattern(string(), ACCOUNT_ADDRESS_REGEX);\nexport type AccountAddress = Infer<typeof AccountAddressStruct>;\n\n/**\n * A chain descriptor.\n */\nexport const ChainStruct = object({\n  id: ChainIdStruct,\n  name: LimitedString,\n});\nexport type Chain = Infer<typeof ChainStruct>;\n\nexport const NamespaceStruct = object({\n  /**\n   * A list of supported chains in the namespace.\n   */\n  chains: array(ChainStruct),\n\n  /**\n   * A list of supported RPC methods on the namespace, that a DApp can call.\n   */\n  methods: optional(array(LimitedString)),\n\n  /**\n   * A list of supported RPC events on the namespace, that a DApp can listen to.\n   */\n  events: optional(array(LimitedString)),\n});\nexport type Namespace = Infer<typeof NamespaceStruct>;\n\n/**\n * A CAIP-2 namespace, i.e., the first part of a chain ID.\n */\nexport const NamespaceIdStruct = pattern(string(), /^[-a-z0-9]{3,8}$/u);\nexport type NamespaceId = Infer<typeof NamespaceIdStruct>;\n\n/**\n * Check if the given value is a CAIP-2 namespace ID.\n *\n * @param value - The value to check.\n * @returns Whether the value is a CAIP-2 namespace ID.\n */\nexport function isNamespaceId(value: unknown): value is NamespaceId {\n  return is(value, NamespaceIdStruct);\n}\n\n/**\n * Check if the given value is a CAIP-2 chain ID.\n *\n * @param value - The value to check.\n * @returns Whether the value is a CAIP-2 chain ID.\n */\nexport function isChainId(value: unknown): value is ChainId {\n  return is(value, ChainIdStruct);\n}\n\n/**\n * Check if the given value is a CAIP-10 account ID.\n *\n * @param value - The value to check.\n * @returns Whether the value is a CAIP-10 account ID.\n */\nexport function isAccountId(value: unknown): value is AccountId {\n  return is(value, AccountIdStruct);\n}\n\n/**\n * Check if the given value is an array of CAIP-10 account IDs.\n *\n * @param value - The value to check.\n * @returns Whether the value is an array of CAIP-10 account IDs.\n */\nexport function isAccountIdArray(value: unknown): value is AccountId[] {\n  return is(value, AccountIdArrayStruct);\n}\n\n/**\n * Check if a value is a {@link Namespace}.\n *\n * @param value - The value to validate.\n * @returns True if the value is a valid {@link Namespace}.\n */\nexport function isNamespace(value: unknown): value is Namespace {\n  return is(value, NamespaceStruct);\n}\n"],"names":["CHAIN_ID_REGEX","ACCOUNT_ID_REGEX","ACCOUNT_ADDRESS_REGEX","parseChainId","parseAccountId","LimitedString","ChainIdStringStruct","ChainIdStruct","AccountIdStruct","AccountIdArrayStruct","AccountAddressStruct","ChainStruct","NamespaceStruct","NamespaceIdStruct","isNamespaceId","isChainId","isAccountId","isAccountIdArray","isNamespace","chainId","match","exec","groups","Error","namespace","reference","accountId","address","accountAddress","chain","size","string","define","validator","pattern","array","object","id","name","chains","methods","optional","events","value","is"],"mappings":";;;;;;;;;;;IAeaA,cAAc;eAAdA;;IAGAC,gBAAgB;eAAhBA;;IAGAC,qBAAqB;eAArBA;;IASGC,YAAY;eAAZA;;IAsBAC,cAAc;eAAdA;;IAwBHC,aAAa;eAAbA;;IAEAC,mBAAmB;eAAnBA;;IAQAC,aAAa;eAAbA;;IAOAC,eAAe;eAAfA;;IAEAC,oBAAoB;eAApBA;;IACAC,oBAAoB;eAApBA;;IAMAC,WAAW;eAAXA;;IAMAC,eAAe;eAAfA;;IAqBAC,iBAAiB;eAAjBA;;IASGC,aAAa;eAAbA;;IAUAC,SAAS;eAATA;;IAUAC,WAAW;eAAXA;;IAUAC,gBAAgB;eAAhBA;;IAUAC,WAAW;eAAXA;;;6BAvKT;AAIA,MAAMlB,iBACX;AAEK,MAAMC,mBACX;AAEK,MAAMC,wBAAwB;AAS9B,SAASC,aAAagB,OAAgB;IAI3C,MAAMC,QAAQpB,eAAeqB,IAAI,CAACF;IAClC,IAAI,CAACC,OAAOE,QAAQ;QAClB,MAAM,IAAIC,MAAM;IAClB;IAEA,OAAO;QACLC,WAAWJ,MAAME,MAAM,CAACE,SAAS;QACjCC,WAAWL,MAAME,MAAM,CAACG,SAAS;IACnC;AACF;AASO,SAASrB,eAAesB,SAAoB;IAKjD,MAAMN,QAAQnB,iBAAiBoB,IAAI,CAACK;IACpC,IAAI,CAACN,OAAOE,QAAQ;QAClB,MAAM,IAAIC,MAAM;IAClB;IAEA,OAAO;QACLI,SAASP,MAAME,MAAM,CAACM,cAAc;QACpCT,SAASC,MAAME,MAAM,CAACH,OAAO;QAC7BU,OAAO;YACLL,WAAWJ,MAAME,MAAM,CAACE,SAAS;YACjCC,WAAWL,MAAME,MAAM,CAACG,SAAS;QACnC;IACF;AACF;AAMO,MAAMpB,gBAAgByB,IAAAA,iBAAI,EAACC,IAAAA,mBAAM,KAAI,GAAG;AAExC,MAAMzB,sBAAsB0B,IAAAA,mBAAM,EACvC,YACAD,IAAAA,mBAAM,IAAGE,SAAS;AAMb,MAAM1B,gBAAgB2B,IAAAA,oBAAO,EAClC5B,qBACAN;AAKK,MAAMQ,kBAAkB0B,IAAAA,oBAAO,EAACH,IAAAA,mBAAM,KAAI9B;AAE1C,MAAMQ,uBAAuB0B,IAAAA,kBAAK,EAAC3B;AACnC,MAAME,uBAAuBwB,IAAAA,oBAAO,EAACH,IAAAA,mBAAM,KAAI7B;AAM/C,MAAMS,cAAcyB,IAAAA,mBAAM,EAAC;IAChCC,IAAI9B;IACJ+B,MAAMjC;AACR;AAGO,MAAMO,kBAAkBwB,IAAAA,mBAAM,EAAC;IACpC;;GAEC,GACDG,QAAQJ,IAAAA,kBAAK,EAACxB;IAEd;;GAEC,GACD6B,SAASC,IAAAA,qBAAQ,EAACN,IAAAA,kBAAK,EAAC9B;IAExB;;GAEC,GACDqC,QAAQD,IAAAA,qBAAQ,EAACN,IAAAA,kBAAK,EAAC9B;AACzB;AAMO,MAAMQ,oBAAoBqB,IAAAA,oBAAO,EAACH,IAAAA,mBAAM,KAAI;AAS5C,SAASjB,cAAc6B,KAAc;IAC1C,OAAOC,IAAAA,eAAE,EAACD,OAAO9B;AACnB;AAQO,SAASE,UAAU4B,KAAc;IACtC,OAAOC,IAAAA,eAAE,EAACD,OAAOpC;AACnB;AAQO,SAASS,YAAY2B,KAAc;IACxC,OAAOC,IAAAA,eAAE,EAACD,OAAOnC;AACnB;AAQO,SAASS,iBAAiB0B,KAAc;IAC7C,OAAOC,IAAAA,eAAE,EAACD,OAAOlC;AACnB;AAQO,SAASS,YAAYyB,KAAc;IACxC,OAAOC,IAAAA,eAAE,EAACD,OAAO/B;AACnB"}