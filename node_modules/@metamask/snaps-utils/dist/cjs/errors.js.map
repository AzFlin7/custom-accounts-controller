{"version":3,"sources":["../../src/errors.ts"],"sourcesContent":["import {\n  errorCodes,\n  JsonRpcError as RpcError,\n  serializeCause,\n} from '@metamask/rpc-errors';\nimport type { DataWithOptionalCause } from '@metamask/rpc-errors';\nimport type { SerializedSnapError, SnapError } from '@metamask/snaps-sdk';\nimport {\n  getErrorMessage,\n  getErrorStack,\n  SNAP_ERROR_CODE,\n  SNAP_ERROR_MESSAGE,\n} from '@metamask/snaps-sdk';\nimport type { Json, JsonRpcError } from '@metamask/utils';\nimport { isObject, isJsonRpcError } from '@metamask/utils';\n\nexport const SNAP_ERROR_WRAPPER_CODE = -31001;\nexport const SNAP_ERROR_WRAPPER_MESSAGE = 'Wrapped Snap Error';\n\nexport type SerializedSnapErrorWrapper = {\n  code: typeof SNAP_ERROR_WRAPPER_CODE;\n  message: typeof SNAP_ERROR_WRAPPER_MESSAGE;\n  data: {\n    cause: Json;\n  };\n};\n\nexport class WrappedSnapError extends Error {\n  readonly #error: unknown;\n\n  readonly #message: string;\n\n  readonly #stack?: string;\n\n  /**\n   * Create a new `WrappedSnapError`.\n   *\n   * @param error - The error to create the `WrappedSnapError` from.\n   */\n  constructor(error: unknown) {\n    const message = getErrorMessage(error);\n    super(message);\n\n    this.#error = error;\n    this.#message = message;\n    this.#stack = getErrorStack(error);\n  }\n\n  /**\n   * The error name.\n   *\n   * @returns The error name.\n   */\n  get name() {\n    return 'WrappedSnapError';\n  }\n\n  /**\n   * The error message.\n   *\n   * @returns The error message.\n   */\n  get message() {\n    return this.#message;\n  }\n\n  /**\n   * The error stack.\n   *\n   * @returns The error stack.\n   */\n  get stack() {\n    return this.#stack;\n  }\n\n  /**\n   * Convert the error to a JSON object.\n   *\n   * @returns The JSON object.\n   */\n  toJSON(): SerializedSnapErrorWrapper {\n    const cause = isSnapError(this.#error)\n      ? this.#error.serialize()\n      : serializeCause(this.#error);\n\n    return {\n      code: SNAP_ERROR_WRAPPER_CODE,\n      message: SNAP_ERROR_WRAPPER_MESSAGE,\n      data: {\n        cause,\n      },\n    };\n  }\n\n  /**\n   * Serialize the error to a JSON object. This is called by\n   * `@metamask/rpc-errors` when serializing the error.\n   *\n   * @returns The JSON object.\n   */\n  serialize() {\n    return this.toJSON();\n  }\n}\n\n/**\n * Check if an object is a `SnapError`.\n *\n * @param error - The object to check.\n * @returns Whether the object is a `SnapError`.\n */\nexport function isSnapError(error: unknown): error is SnapError {\n  if (\n    isObject(error) &&\n    'serialize' in error &&\n    typeof error.serialize === 'function'\n  ) {\n    const serialized = error.serialize();\n    return isJsonRpcError(serialized) && isSerializedSnapError(serialized);\n  }\n\n  return false;\n}\n\n/**\n * Check if a JSON-RPC error is a `SnapError`.\n *\n * @param error - The object to check.\n * @returns Whether the object is a `SnapError`.\n */\nexport function isSerializedSnapError(\n  error: JsonRpcError,\n): error is SerializedSnapError {\n  return error.code === SNAP_ERROR_CODE && error.message === SNAP_ERROR_MESSAGE;\n}\n\n/**\n * Check if a JSON-RPC error is a `WrappedSnapError`.\n *\n * @param error - The object to check.\n * @returns Whether the object is a `WrappedSnapError`.\n */\nexport function isWrappedSnapError(\n  error: unknown,\n): error is SerializedSnapErrorWrapper {\n  return (\n    isJsonRpcError(error) &&\n    error.code === SNAP_ERROR_WRAPPER_CODE &&\n    error.message === SNAP_ERROR_WRAPPER_MESSAGE\n  );\n}\n\n/**\n * Get a JSON-RPC error with the given code, message, stack, and data.\n *\n * @param code - The error code.\n * @param message - The error message.\n * @param stack - The error stack.\n * @param data - Additional data for the error.\n * @returns The JSON-RPC error.\n */\nfunction getJsonRpcError(\n  code: number,\n  message: string,\n  stack?: string,\n  data?: Json,\n) {\n  const error = new RpcError(code, message, data);\n  error.stack = stack;\n\n  return error;\n}\n\n/**\n * Attempt to unwrap an unknown error to a `JsonRpcError`. This function will\n * try to get the error code, message, and data from the error, and return a\n * `JsonRpcError` with those properties.\n *\n * @param error - The error to unwrap.\n * @returns A tuple containing the unwrapped error and a boolean indicating\n * whether the error was handled.\n */\nexport function unwrapError(\n  error: unknown,\n): [error: RpcError<DataWithOptionalCause>, isHandled: boolean] {\n  // This logic is a bit complicated, but it's necessary to handle all the\n  // different types of errors that can be thrown by a Snap.\n\n  // If the error is a wrapped Snap error, unwrap it.\n  if (isWrappedSnapError(error)) {\n    // The wrapped error can be a JSON-RPC error, or an unknown error. If it's\n    // a JSON-RPC error, we can unwrap it further.\n    if (isJsonRpcError(error.data.cause)) {\n      // If the JSON-RPC error is a wrapped Snap error, unwrap it further.\n      if (isSerializedSnapError(error.data.cause)) {\n        const { code, message, stack, data } = error.data.cause.data.cause;\n        return [getJsonRpcError(code, message, stack, data), true];\n      }\n\n      // Otherwise, we use the original JSON-RPC error.\n      const { code, message, stack, data } = error.data.cause;\n      return [getJsonRpcError(code, message, stack, data), false];\n    }\n\n    // Otherwise, we throw an internal error with the wrapped error as the\n    // message.\n    return [\n      getJsonRpcError(\n        errorCodes.rpc.internal,\n        getErrorMessage(error.data.cause),\n        getErrorStack(error.data.cause),\n      ),\n      false,\n    ];\n  }\n\n  // The error can be a non-wrapped JSON-RPC error, in which case we can just\n  // re-throw it with the same code, message, and data.\n  if (isJsonRpcError(error)) {\n    const { code, message, stack, data } = error;\n    return [getJsonRpcError(code, message, stack, data), false];\n  }\n\n  // If the error is not a wrapped error, we don't know how to handle it, so we\n  // throw an internal error with the error as the message.\n  return [\n    getJsonRpcError(\n      errorCodes.rpc.internal,\n      getErrorMessage(error),\n      getErrorStack(error),\n    ),\n    false,\n  ];\n}\n"],"names":["SNAP_ERROR_WRAPPER_CODE","SNAP_ERROR_WRAPPER_MESSAGE","WrappedSnapError","isSnapError","isSerializedSnapError","isWrappedSnapError","unwrapError","Error","name","message","stack","toJSON","cause","error","serialize","serializeCause","code","data","constructor","getErrorMessage","getErrorStack","isObject","serialized","isJsonRpcError","SNAP_ERROR_CODE","SNAP_ERROR_MESSAGE","getJsonRpcError","RpcError","errorCodes","rpc","internal"],"mappings":"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"}