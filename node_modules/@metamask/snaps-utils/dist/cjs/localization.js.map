{"version":3,"sources":["../../src/localization.ts"],"sourcesContent":["import { getErrorMessage } from '@metamask/snaps-sdk';\nimport type { Infer } from 'superstruct';\nimport {\n  create,\n  object,\n  optional,\n  record,\n  string,\n  StructError,\n} from 'superstruct';\n\nimport { parseJson } from './json';\nimport type { SnapManifest } from './manifest';\nimport type { VirtualFile } from './virtual-file';\n\nexport const LOCALIZABLE_FIELDS = ['description', 'proposedName'] as const;\n\nexport const LocalizationFileStruct = object({\n  locale: string(),\n  messages: record(\n    string(),\n    object({\n      message: string(),\n      description: optional(string()),\n    }),\n  ),\n});\n\nexport type LocalizationFile = Infer<typeof LocalizationFileStruct>;\n\n/**\n * Validate a list of localization files.\n *\n * @param localizationFiles - The localization files to validate.\n * @returns The validated localization files.\n * @throws If any of the files are considered invalid.\n */\nexport function getValidatedLocalizationFiles(\n  localizationFiles: VirtualFile[],\n): VirtualFile<LocalizationFile>[] {\n  for (const file of localizationFiles) {\n    try {\n      file.result = create(parseJson(file.toString()), LocalizationFileStruct);\n    } catch (error) {\n      if (error instanceof StructError) {\n        throw new Error(\n          `Failed to validate localization file \"${file.path}\": ${error.message}.`,\n        );\n      }\n\n      if (error instanceof SyntaxError) {\n        throw new Error(\n          `Failed to parse localization file \"${file.path}\" as JSON.`,\n        );\n      }\n\n      throw error;\n    }\n  }\n\n  return localizationFiles as VirtualFile<LocalizationFile>[];\n}\n\n/**\n * Get the localization file for a given locale. If the locale is not found,\n * the English localization file will be returned.\n *\n * @param locale - The locale to use.\n * @param localizationFiles - The localization files to use.\n * @returns The localization file, or `undefined` if no localization file was\n * found.\n */\nexport function getLocalizationFile(\n  locale: string,\n  localizationFiles: LocalizationFile[],\n) {\n  const file = localizationFiles.find(\n    (localizationFile) => localizationFile.locale === locale,\n  );\n\n  if (!file) {\n    return localizationFiles.find(\n      (localizationFile) => localizationFile.locale === 'en',\n    );\n  }\n\n  return file;\n}\n\nexport const TRANSLATION_REGEX = /\\{\\{\\s?([a-zA-Z0-9-_\\s]+)\\s?\\}\\}/gu;\n\n/**\n * Translate a string using a localization file. This will replace all instances\n * of `{{key}}` with the localized version of `key`.\n *\n * @param value - The string to translate.\n * @param file - The localization file to use, or `undefined` if no localization\n * file was found.\n * @returns The translated string.\n * @throws If the string contains a key that is not present in the localization\n * file, or if no localization file was found.\n */\nexport function translate(value: string, file: LocalizationFile | undefined) {\n  const matches = value.matchAll(TRANSLATION_REGEX);\n  const array = Array.from(matches);\n\n  return array.reduce<string>((result, [match, key]) => {\n    if (!file) {\n      throw new Error(\n        `Failed to translate \"${value}\": No localization file found.`,\n      );\n    }\n\n    const translation = file.messages[key.trim()];\n    if (!translation) {\n      throw new Error(\n        `Failed to translate \"${value}\": No translation found for \"${key.trim()}\" in \"${\n          file.locale\n        }\" file.`,\n      );\n    }\n\n    return result.replace(match, translation.message);\n  }, value);\n}\n\n/**\n * Get the localized Snap manifest for a given locale. This will replace all\n * localized strings in the manifest with the localized version.\n *\n * @param snapManifest - The Snap manifest to localize.\n * @param locale - The locale to use.\n * @param localizationFiles - The localization files to use.\n * @returns The localized Snap manifest.\n */\nexport function getLocalizedSnapManifest(\n  snapManifest: SnapManifest,\n  locale: string,\n  localizationFiles: LocalizationFile[],\n) {\n  const file = getLocalizationFile(locale, localizationFiles);\n\n  return LOCALIZABLE_FIELDS.reduce((manifest, field) => {\n    const translation = translate(manifest[field], file);\n    return {\n      ...manifest,\n      [field]: translation,\n    };\n  }, snapManifest);\n}\n\n/**\n * Validate the localization files for a Snap manifest.\n *\n * @param snapManifest - The Snap manifest to validate.\n * @param localizationFiles - The localization files to validate.\n * @throws If the manifest cannot be localized.\n */\nexport function validateSnapManifestLocalizations(\n  snapManifest: SnapManifest,\n  localizationFiles: LocalizationFile[],\n) {\n  try {\n    // `translate` throws if the manifest cannot be localized, so we just attempt\n    // to translate the manifest using all localization files.\n    localizationFiles\n      .filter((file) => file.locale !== 'en')\n      .forEach((file) => {\n        getLocalizedSnapManifest(snapManifest, file.locale, localizationFiles);\n      });\n\n    // The manifest must be localizable in English.\n    getLocalizedSnapManifest(snapManifest, 'en', localizationFiles);\n  } catch (error) {\n    throw new Error(\n      `Failed to localize Snap manifest: ${getErrorMessage(error)}`,\n    );\n  }\n}\n"],"names":["LOCALIZABLE_FIELDS","LocalizationFileStruct","getValidatedLocalizationFiles","getLocalizationFile","TRANSLATION_REGEX","translate","getLocalizedSnapManifest","validateSnapManifestLocalizations","object","locale","string","messages","record","message","description","optional","localizationFiles","file","result","create","parseJson","toString","error","StructError","Error","path","SyntaxError","find","localizationFile","value","matches","matchAll","array","Array","from","reduce","match","key","translation","trim","replace","snapManifest","manifest","field","filter","forEach","getErrorMessage"],"mappings":"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"}