import type { InitialPermissions } from '@metamask/snaps-sdk';
import type { Infer, Struct } from 'superstruct';
import type { InferMatching } from '../structs';
export declare const FORBIDDEN_COIN_TYPES: number[];
export declare const Bip32PathStruct: Struct<string[], Struct<string, null>>;
export declare const bip32entropy: <Type extends {
    path: string[];
    curve: string;
}, Schema>(struct: Struct<Type, Schema>) => Struct<Type, Schema>;
export declare const Bip32EntropyStruct: Struct<{
    path: string[];
    curve: "ed25519" | "secp256k1";
}, {
    path: Struct<string[], Struct<string, null>>;
    curve: Struct<"ed25519" | "secp256k1", {
        ed25519: "ed25519";
        secp256k1: "secp256k1";
    }>;
}>;
export declare type Bip32Entropy = Infer<typeof Bip32EntropyStruct>;
export declare const SnapGetBip32EntropyPermissionsStruct: Struct<{
    path: string[];
    curve: "ed25519" | "secp256k1";
}[], Struct<{
    path: string[];
    curve: "ed25519" | "secp256k1";
}, {
    path: Struct<string[], Struct<string, null>>;
    curve: Struct<"ed25519" | "secp256k1", {
        ed25519: "ed25519";
        secp256k1: "secp256k1";
    }>;
}>>;
export declare const SemVerRangeStruct: Struct<string, null>;
export declare const SnapIdsStruct: Struct<Record<string, {
    version?: string | undefined;
}>, null>;
export declare type SnapIds = Infer<typeof SnapIdsStruct>;
export declare const ChainIdsStruct: Struct<`${string}:${string}`[], Struct<`${string}:${string}`, null>>;
export declare const PermissionsStruct: Struct<{
    snap_dialog?: {} | undefined;
    snap_getBip32Entropy?: {
        path: string[];
        curve: "ed25519" | "secp256k1";
    }[] | undefined;
    snap_getBip32PublicKey?: {
        path: string[];
        curve: "ed25519" | "secp256k1";
    }[] | undefined;
    snap_getBip44Entropy?: {
        coinType: number;
    }[] | undefined;
    snap_getEntropy?: {} | undefined;
    snap_getLocale?: {} | undefined;
    snap_manageAccounts?: {} | undefined;
    snap_manageState?: {} | undefined;
    snap_notify?: {} | undefined;
    wallet_snap?: Record<string, {
        version?: string | undefined;
    }> | undefined;
    'endowment:ethereum-provider'?: {} | undefined;
    'endowment:network-access'?: {} | undefined;
    'endowment:webassembly'?: {} | undefined;
    'endowment:signature-insight'?: {
        allowSignatureOrigin?: boolean | undefined;
    } | undefined;
    'endowment:transaction-insight'?: {
        allowTransactionOrigin?: boolean | undefined;
    } | undefined;
    'endowment:cronjob'?: {
        jobs: {
            request: {
                method: string;
                id?: string | number | null | undefined;
                jsonrpc?: "2.0" | undefined;
                params?: Record<string, import("@metamask/snaps-sdk").Json> | import("@metamask/snaps-sdk").Json[] | undefined;
            };
            expression: string;
        }[];
    } | undefined;
    'endowment:rpc'?: {
        dapps?: boolean | undefined;
        snaps?: boolean | undefined;
        allowedOrigins?: string[] | undefined;
    } | undefined;
    'endowment:name-lookup'?: `${string}:${string}`[] | undefined;
    'endowment:keyring'?: {
        allowedOrigins?: string[] | undefined;
    } | undefined;
    snap_confirm?: {} | undefined;
}, {
    'endowment:ethereum-provider': Struct<{} | undefined, {}>;
    'endowment:network-access': Struct<{} | undefined, {}>;
    'endowment:webassembly': Struct<{} | undefined, {}>;
    'endowment:signature-insight': Struct<{
        allowSignatureOrigin?: boolean | undefined;
    } | undefined, {
        allowSignatureOrigin: Struct<boolean | undefined, null>;
    }>;
    'endowment:transaction-insight': Struct<{
        allowTransactionOrigin?: boolean | undefined;
    } | undefined, {
        allowTransactionOrigin: Struct<boolean | undefined, null>;
    }>;
    'endowment:cronjob': Struct<{
        jobs: {
            request: {
                method: string;
                id?: string | number | null | undefined;
                jsonrpc?: "2.0" | undefined;
                params?: Record<string, import("@metamask/snaps-sdk").Json> | import("@metamask/snaps-sdk").Json[] | undefined;
            };
            expression: string;
        }[];
    } | undefined, {
        jobs: Struct<{
            request: {
                method: string;
                id?: string | number | null | undefined;
                jsonrpc?: "2.0" | undefined;
                params?: Record<string, import("@metamask/snaps-sdk").Json> | import("@metamask/snaps-sdk").Json[] | undefined;
            };
            expression: string;
        }[], Struct<{
            request: {
                method: string;
                id?: string | number | null | undefined;
                jsonrpc?: "2.0" | undefined;
                params?: Record<string, import("@metamask/snaps-sdk").Json> | import("@metamask/snaps-sdk").Json[] | undefined;
            };
            expression: string;
        }, {
            expression: Struct<string, null>;
            request: Struct<{
                method: string;
                id?: string | number | null | undefined;
                jsonrpc?: "2.0" | undefined;
                params?: Record<string, import("@metamask/snaps-sdk").Json> | import("@metamask/snaps-sdk").Json[] | undefined;
            }, {
                jsonrpc: Struct<"2.0" | undefined, "2.0">;
                id: Struct<string | number | null | undefined, null>;
                method: Struct<string, null>;
                params: Struct<Record<string, import("@metamask/snaps-sdk").Json> | import("@metamask/snaps-sdk").Json[] | undefined, null>;
            }>;
        }>>;
    }>;
    'endowment:rpc': Struct<{
        dapps?: boolean | undefined;
        snaps?: boolean | undefined;
        allowedOrigins?: string[] | undefined;
    } | undefined, {
        dapps: Struct<boolean | undefined, null>;
        snaps: Struct<boolean | undefined, null>;
        allowedOrigins: Struct<string[] | undefined, Struct<string, null>>;
    }>;
    'endowment:name-lookup': Struct<`${string}:${string}`[] | undefined, Struct<`${string}:${string}`, null>>;
    'endowment:keyring': Struct<{
        allowedOrigins?: string[] | undefined;
    } | undefined, {
        allowedOrigins: Struct<string[] | undefined, Struct<string, null>>;
    }>;
    snap_dialog: Struct<{} | undefined, {}>;
    snap_confirm: Struct<{} | undefined, {}>;
    snap_manageState: Struct<{} | undefined, {}>;
    snap_manageAccounts: Struct<{} | undefined, {}>;
    snap_notify: Struct<{} | undefined, {}>;
    snap_getBip32Entropy: Struct<{
        path: string[];
        curve: "ed25519" | "secp256k1";
    }[] | undefined, Struct<{
        path: string[];
        curve: "ed25519" | "secp256k1";
    }, {
        path: Struct<string[], Struct<string, null>>;
        curve: Struct<"ed25519" | "secp256k1", {
            ed25519: "ed25519";
            secp256k1: "secp256k1";
        }>;
    }>>;
    snap_getBip32PublicKey: Struct<{
        path: string[];
        curve: "ed25519" | "secp256k1";
    }[] | undefined, Struct<{
        path: string[];
        curve: "ed25519" | "secp256k1";
    }, {
        path: Struct<string[], Struct<string, null>>;
        curve: Struct<"ed25519" | "secp256k1", {
            ed25519: "ed25519";
            secp256k1: "secp256k1";
        }>;
    }>>;
    snap_getBip44Entropy: Struct<{
        coinType: number;
    }[] | undefined, Struct<{
        coinType: number;
    }, {
        coinType: Struct<number, null>;
    }>>;
    snap_getEntropy: Struct<{} | undefined, {}>;
    snap_getLocale: Struct<{} | undefined, {}>;
    wallet_snap: Struct<Record<string, {
        version?: string | undefined;
    }> | undefined, null>;
}>;
export declare type SnapPermissions = InferMatching<typeof PermissionsStruct, InitialPermissions>;
export declare const SnapAuxilaryFilesStruct: Struct<string[], Struct<string, null>>;
export declare const InitialConnectionsStruct: Struct<Record<string & URL, {}>, null>;
export declare type InitialConnections = Infer<typeof InitialConnectionsStruct>;
export declare const SnapManifestStruct: Struct<{
    description: string;
    version: import("@metamask/utils").SemVerVersion;
    source: {
        location: {
            npm: {
                registry: "https://registry.npmjs.org" | "https://registry.npmjs.org/";
                filePath: string;
                packageName: string;
                iconPath?: string | undefined;
            };
        };
        shasum: string;
        files?: string[] | undefined;
        locales?: string[] | undefined;
    };
    proposedName: string;
    initialPermissions: {
        snap_dialog?: {} | undefined;
        snap_getBip32Entropy?: {
            path: string[];
            curve: "ed25519" | "secp256k1";
        }[] | undefined;
        snap_getBip32PublicKey?: {
            path: string[];
            curve: "ed25519" | "secp256k1";
        }[] | undefined;
        snap_getBip44Entropy?: {
            coinType: number;
        }[] | undefined;
        snap_getEntropy?: {} | undefined;
        snap_getLocale?: {} | undefined;
        snap_manageAccounts?: {} | undefined;
        snap_manageState?: {} | undefined;
        snap_notify?: {} | undefined;
        wallet_snap?: Record<string, {
            version?: string | undefined;
        }> | undefined;
        'endowment:ethereum-provider'?: {} | undefined;
        'endowment:network-access'?: {} | undefined;
        'endowment:webassembly'?: {} | undefined;
        'endowment:signature-insight'?: {
            allowSignatureOrigin?: boolean | undefined;
        } | undefined;
        'endowment:transaction-insight'?: {
            allowTransactionOrigin?: boolean | undefined;
        } | undefined;
        'endowment:cronjob'?: {
            jobs: {
                request: {
                    method: string;
                    id?: string | number | null | undefined;
                    jsonrpc?: "2.0" | undefined;
                    params?: Record<string, import("@metamask/snaps-sdk").Json> | import("@metamask/snaps-sdk").Json[] | undefined;
                };
                expression: string;
            }[];
        } | undefined;
        'endowment:rpc'?: {
            dapps?: boolean | undefined;
            snaps?: boolean | undefined;
            allowedOrigins?: string[] | undefined;
        } | undefined;
        'endowment:name-lookup'?: `${string}:${string}`[] | undefined;
        'endowment:keyring'?: {
            allowedOrigins?: string[] | undefined;
        } | undefined;
        snap_confirm?: {} | undefined;
    };
    manifestVersion: "0.1";
    repository?: {
        type: string;
        url: string;
    } | undefined;
    initialConnections?: Record<string & URL, {}> | undefined;
    $schema?: string | undefined;
}, {
    version: Struct<import("@metamask/utils").SemVerVersion, null>;
    description: Struct<string, null>;
    proposedName: Struct<string, null>;
    repository: Struct<{
        type: string;
        url: string;
    } | undefined, {
        type: Struct<string, null>;
        url: Struct<string, null>;
    }>;
    source: Struct<{
        location: {
            npm: {
                registry: "https://registry.npmjs.org" | "https://registry.npmjs.org/";
                filePath: string;
                packageName: string;
                iconPath?: string | undefined;
            };
        };
        shasum: string;
        files?: string[] | undefined;
        locales?: string[] | undefined;
    }, {
        shasum: Struct<string, null>;
        location: Struct<{
            npm: {
                registry: "https://registry.npmjs.org" | "https://registry.npmjs.org/";
                filePath: string;
                packageName: string;
                iconPath?: string | undefined;
            };
        }, {
            npm: Struct<{
                registry: "https://registry.npmjs.org" | "https://registry.npmjs.org/";
                filePath: string;
                packageName: string;
                iconPath?: string | undefined;
            }, {
                filePath: Struct<string, null>;
                iconPath: Struct<string | undefined, null>;
                packageName: Struct<string, null>;
                registry: Struct<"https://registry.npmjs.org" | "https://registry.npmjs.org/", null>;
            }>;
        }>;
        files: Struct<string[] | undefined, Struct<string, null>>;
        locales: Struct<string[] | undefined, Struct<string, null>>;
    }>;
    initialConnections: Struct<Record<string & URL, {}> | undefined, null>;
    initialPermissions: Struct<{
        snap_dialog?: {} | undefined;
        snap_getBip32Entropy?: {
            path: string[];
            curve: "ed25519" | "secp256k1";
        }[] | undefined;
        snap_getBip32PublicKey?: {
            path: string[];
            curve: "ed25519" | "secp256k1";
        }[] | undefined;
        snap_getBip44Entropy?: {
            coinType: number;
        }[] | undefined;
        snap_getEntropy?: {} | undefined;
        snap_getLocale?: {} | undefined;
        snap_manageAccounts?: {} | undefined;
        snap_manageState?: {} | undefined;
        snap_notify?: {} | undefined;
        wallet_snap?: Record<string, {
            version?: string | undefined;
        }> | undefined;
        'endowment:ethereum-provider'?: {} | undefined;
        'endowment:network-access'?: {} | undefined;
        'endowment:webassembly'?: {} | undefined;
        'endowment:signature-insight'?: {
            allowSignatureOrigin?: boolean | undefined;
        } | undefined;
        'endowment:transaction-insight'?: {
            allowTransactionOrigin?: boolean | undefined;
        } | undefined;
        'endowment:cronjob'?: {
            jobs: {
                request: {
                    method: string;
                    id?: string | number | null | undefined;
                    jsonrpc?: "2.0" | undefined;
                    params?: Record<string, import("@metamask/snaps-sdk").Json> | import("@metamask/snaps-sdk").Json[] | undefined;
                };
                expression: string;
            }[];
        } | undefined;
        'endowment:rpc'?: {
            dapps?: boolean | undefined;
            snaps?: boolean | undefined;
            allowedOrigins?: string[] | undefined;
        } | undefined;
        'endowment:name-lookup'?: `${string}:${string}`[] | undefined;
        'endowment:keyring'?: {
            allowedOrigins?: string[] | undefined;
        } | undefined;
        snap_confirm?: {} | undefined;
    }, {
        'endowment:ethereum-provider': Struct<{} | undefined, {}>;
        'endowment:network-access': Struct<{} | undefined, {}>;
        'endowment:webassembly': Struct<{} | undefined, {}>;
        'endowment:signature-insight': Struct<{
            allowSignatureOrigin?: boolean | undefined;
        } | undefined, {
            allowSignatureOrigin: Struct<boolean | undefined, null>;
        }>;
        'endowment:transaction-insight': Struct<{
            allowTransactionOrigin?: boolean | undefined;
        } | undefined, {
            allowTransactionOrigin: Struct<boolean | undefined, null>;
        }>;
        'endowment:cronjob': Struct<{
            jobs: {
                request: {
                    method: string;
                    id?: string | number | null | undefined;
                    jsonrpc?: "2.0" | undefined;
                    params?: Record<string, import("@metamask/snaps-sdk").Json> | import("@metamask/snaps-sdk").Json[] | undefined;
                };
                expression: string;
            }[];
        } | undefined, {
            jobs: Struct<{
                request: {
                    method: string;
                    id?: string | number | null | undefined;
                    jsonrpc?: "2.0" | undefined;
                    params?: Record<string, import("@metamask/snaps-sdk").Json> | import("@metamask/snaps-sdk").Json[] | undefined;
                };
                expression: string;
            }[], Struct<{
                request: {
                    method: string;
                    id?: string | number | null | undefined;
                    jsonrpc?: "2.0" | undefined;
                    params?: Record<string, import("@metamask/snaps-sdk").Json> | import("@metamask/snaps-sdk").Json[] | undefined;
                };
                expression: string;
            }, {
                expression: Struct<string, null>;
                request: Struct<{
                    method: string;
                    id?: string | number | null | undefined;
                    jsonrpc?: "2.0" | undefined;
                    params?: Record<string, import("@metamask/snaps-sdk").Json> | import("@metamask/snaps-sdk").Json[] | undefined;
                }, {
                    jsonrpc: Struct<"2.0" | undefined, "2.0">;
                    id: Struct<string | number | null | undefined, null>;
                    method: Struct<string, null>;
                    params: Struct<Record<string, import("@metamask/snaps-sdk").Json> | import("@metamask/snaps-sdk").Json[] | undefined, null>;
                }>;
            }>>;
        }>;
        'endowment:rpc': Struct<{
            dapps?: boolean | undefined;
            snaps?: boolean | undefined;
            allowedOrigins?: string[] | undefined;
        } | undefined, {
            dapps: Struct<boolean | undefined, null>;
            snaps: Struct<boolean | undefined, null>;
            allowedOrigins: Struct<string[] | undefined, Struct<string, null>>;
        }>;
        'endowment:name-lookup': Struct<`${string}:${string}`[] | undefined, Struct<`${string}:${string}`, null>>;
        'endowment:keyring': Struct<{
            allowedOrigins?: string[] | undefined;
        } | undefined, {
            allowedOrigins: Struct<string[] | undefined, Struct<string, null>>;
        }>;
        snap_dialog: Struct<{} | undefined, {}>;
        snap_confirm: Struct<{} | undefined, {}>;
        snap_manageState: Struct<{} | undefined, {}>;
        snap_manageAccounts: Struct<{} | undefined, {}>;
        snap_notify: Struct<{} | undefined, {}>;
        snap_getBip32Entropy: Struct<{
            path: string[];
            curve: "ed25519" | "secp256k1";
        }[] | undefined, Struct<{
            path: string[];
            curve: "ed25519" | "secp256k1";
        }, {
            path: Struct<string[], Struct<string, null>>;
            curve: Struct<"ed25519" | "secp256k1", {
                ed25519: "ed25519";
                secp256k1: "secp256k1";
            }>;
        }>>;
        snap_getBip32PublicKey: Struct<{
            path: string[];
            curve: "ed25519" | "secp256k1";
        }[] | undefined, Struct<{
            path: string[];
            curve: "ed25519" | "secp256k1";
        }, {
            path: Struct<string[], Struct<string, null>>;
            curve: Struct<"ed25519" | "secp256k1", {
                ed25519: "ed25519";
                secp256k1: "secp256k1";
            }>;
        }>>;
        snap_getBip44Entropy: Struct<{
            coinType: number;
        }[] | undefined, Struct<{
            coinType: number;
        }, {
            coinType: Struct<number, null>;
        }>>;
        snap_getEntropy: Struct<{} | undefined, {}>;
        snap_getLocale: Struct<{} | undefined, {}>;
        wallet_snap: Struct<Record<string, {
            version?: string | undefined;
        }> | undefined, null>;
    }>;
    manifestVersion: Struct<"0.1", "0.1">;
    $schema: Struct<string | undefined, null>;
}>;
export declare type SnapManifest = Infer<typeof SnapManifestStruct>;
/**
 * Check if the given value is a valid {@link SnapManifest} object.
 *
 * @param value - The value to check.
 * @returns Whether the value is a valid {@link SnapManifest} object.
 */
export declare function isSnapManifest(value: unknown): value is SnapManifest;
/**
 * Assert that the given value is a valid {@link SnapManifest} object.
 *
 * @param value - The value to check.
 * @throws If the value is not a valid {@link SnapManifest} object.
 */
export declare function assertIsSnapManifest(value: unknown): asserts value is SnapManifest;
/**
 * Creates a {@link SnapManifest} object from JSON.
 *
 * @param value - The value to check.
 * @throws If the value cannot be coerced to a {@link SnapManifest} object.
 * @returns The created {@link SnapManifest} object.
 */
export declare function createSnapManifest(value: unknown): SnapManifest;
