{"version":3,"sources":["../../src/auxiliary-files.ts"],"sourcesContent":["import { AuxiliaryFileEncoding } from '@metamask/snaps-sdk';\nimport { bytesToHex, bytesToString } from '@metamask/utils';\n\nimport { decodeBase64 } from './base64';\n\n/**\n * Re-encodes an auxiliary file if needed depending on the requested file encoding.\n *\n * @param value - The base64 value stored for the auxiliary file.\n * @param encoding - The chosen encoding.\n * @returns The file encoded in the requested encoding.\n */\nexport async function encodeAuxiliaryFile(\n  value: string,\n  encoding: AuxiliaryFileEncoding,\n) {\n  // Input is assumed to be the stored file in base64.\n  if (encoding === AuxiliaryFileEncoding.Base64) {\n    return value;\n  }\n\n  // TODO: Use @metamask/utils for this\n  const decoded = await decodeBase64(value);\n  if (encoding === AuxiliaryFileEncoding.Utf8) {\n    return bytesToString(decoded);\n  }\n\n  return bytesToHex(decoded);\n}\n"],"names":["AuxiliaryFileEncoding","bytesToHex","bytesToString","decodeBase64","encodeAuxiliaryFile","value","encoding","Base64","decoded","Utf8"],"mappings":"AAAA,SAASA,qBAAqB,QAAQ,sBAAsB;AAC5D,SAASC,UAAU,EAAEC,aAAa,QAAQ,kBAAkB;AAE5D,SAASC,YAAY,QAAQ,WAAW;AAExC;;;;;;CAMC,GACD,OAAO,eAAeC,oBACpBC,KAAa,EACbC,QAA+B;IAE/B,oDAAoD;IACpD,IAAIA,aAAaN,sBAAsBO,MAAM,EAAE;QAC7C,OAAOF;IACT;IAEA,qCAAqC;IACrC,MAAMG,UAAU,MAAML,aAAaE;IACnC,IAAIC,aAAaN,sBAAsBS,IAAI,EAAE;QAC3C,OAAOP,cAAcM;IACvB;IAEA,OAAOP,WAAWO;AACpB"}