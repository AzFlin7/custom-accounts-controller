{"version":3,"sources":["../../src/cronjob.ts"],"sourcesContent":["import {\n  JsonRpcIdStruct,\n  JsonRpcParamsStruct,\n  JsonRpcVersionStruct,\n} from '@metamask/utils';\nimport { parseExpression } from 'cron-parser';\nimport type { Infer } from 'superstruct';\nimport { array, create, object, optional, refine, string } from 'superstruct';\n\nexport const CronjobRpcRequestStruct = object({\n  jsonrpc: optional(JsonRpcVersionStruct),\n  id: optional(JsonRpcIdStruct),\n  method: string(),\n  params: optional(JsonRpcParamsStruct),\n});\n\nexport type CronjobRpcRequest = Infer<typeof CronjobRpcRequestStruct>;\n\nexport const CronExpressionStruct = refine(\n  string(),\n  'CronExpression',\n  (value) => {\n    try {\n      parseExpression(value);\n      return true;\n    } catch {\n      return false;\n    }\n  },\n);\n\nexport type CronExpression = Infer<typeof CronExpressionStruct>;\n\n/**\n * Parses a cron expression.\n *\n * @param expression - Expression to parse.\n * @returns A CronExpression class instance.\n */\nexport function parseCronExpression(expression: string | object) {\n  const ensureStringExpression = create(expression, CronExpressionStruct);\n  return parseExpression(ensureStringExpression);\n}\n\nexport const CronjobSpecificationStruct = object({\n  expression: CronExpressionStruct,\n  request: CronjobRpcRequestStruct,\n});\nexport type CronjobSpecification = Infer<typeof CronjobSpecificationStruct>;\n\n/**\n * Check if the given value is a {@link CronjobSpecification} object.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link CronjobSpecification} object.\n */\nexport function isCronjobSpecification(value: unknown): boolean {\n  try {\n    create(value, CronjobSpecificationStruct);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport const CronjobSpecificationArrayStruct = array(\n  CronjobSpecificationStruct,\n);\n\n/**\n * Check if the given value is an array of {@link CronjobSpecification} objects.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid array of {@link CronjobSpecification} objects.\n */\nexport function isCronjobSpecificationArray(value: unknown): boolean {\n  try {\n    create(value, CronjobSpecificationArrayStruct);\n    return true;\n  } catch {\n    return false;\n  }\n}\n"],"names":["CronjobRpcRequestStruct","CronExpressionStruct","parseCronExpression","CronjobSpecificationStruct","isCronjobSpecification","CronjobSpecificationArrayStruct","isCronjobSpecificationArray","object","jsonrpc","optional","JsonRpcVersionStruct","id","JsonRpcIdStruct","method","string","params","JsonRpcParamsStruct","refine","value","parseExpression","expression","ensureStringExpression","create","request","array"],"mappings":";;;;;;;;;;;IASaA,uBAAuB;eAAvBA;;IASAC,oBAAoB;eAApBA;;IAqBGC,mBAAmB;eAAnBA;;IAKHC,0BAA0B;eAA1BA;;IAYGC,sBAAsB;eAAtBA;;IASHC,+BAA+B;eAA/BA;;IAUGC,2BAA2B;eAA3BA;;;uBAvET;4BACyB;6BAEgC;AAEzD,MAAMN,0BAA0BO,IAAAA,mBAAM,EAAC;IAC5CC,SAASC,IAAAA,qBAAQ,EAACC,2BAAoB;IACtCC,IAAIF,IAAAA,qBAAQ,EAACG,sBAAe;IAC5BC,QAAQC,IAAAA,mBAAM;IACdC,QAAQN,IAAAA,qBAAQ,EAACO,0BAAmB;AACtC;AAIO,MAAMf,uBAAuBgB,IAAAA,mBAAM,EACxCH,IAAAA,mBAAM,KACN,kBACA,CAACI;IACC,IAAI;QACFC,IAAAA,2BAAe,EAACD;QAChB,OAAO;IACT,EAAE,OAAM;QACN,OAAO;IACT;AACF;AAWK,SAAShB,oBAAoBkB,UAA2B;IAC7D,MAAMC,yBAAyBC,IAAAA,mBAAM,EAACF,YAAYnB;IAClD,OAAOkB,IAAAA,2BAAe,EAACE;AACzB;AAEO,MAAMlB,6BAA6BI,IAAAA,mBAAM,EAAC;IAC/Ca,YAAYnB;IACZsB,SAASvB;AACX;AASO,SAASI,uBAAuBc,KAAc;IACnD,IAAI;QACFI,IAAAA,mBAAM,EAACJ,OAAOf;QACd,OAAO;IACT,EAAE,OAAM;QACN,OAAO;IACT;AACF;AAEO,MAAME,kCAAkCmB,IAAAA,kBAAK,EAClDrB;AASK,SAASG,4BAA4BY,KAAc;IACxD,IAAI;QACFI,IAAAA,mBAAM,EAACJ,OAAOb;QACd,OAAO;IACT,EAAE,OAAM;QACN,OAAO;IACT;AACF"}